-- @path XML=/MySQL2KM3/Metamodels/XML.ecore
-- @path MySQL=/MySQL2KM3/Metamodels/MySQL.ecore
-- @path KM3=/MySQL2KM3/Metamodels/KM3.ecore

module XML2MySQL;
create OUT : MySQL from IN : XML;


-------------------------------------------------------------------------------
-- HELPERS --------------------------------------------------------------------
-------------------------------------------------------------------------------

-- HELPER:	rootElt
-- Returns the root Root element of the XML input model.
-- CONTEXT:	thisModule
-- OUT:		XML!Root
helper def: rootElt : XML!Root =
	XML!Root.allInstances()->asSequence()->first();

-- HELPER:	getAttrVal
-- Returns a string corresponding to the value of the attribute (identified by
-- the string passed as parameter) of the contextual XML!Element.
-- CONTEXT:	XML!Element
-- IN:		String
-- OUT:		String
helper context XML!Element def: getAttrVal(name : String) : String =
    self.children
		->select(c | c.oclIsKindOf(XML!Attribute) and c.name = name)
		->first().value;

-- HELPER:	getElementsByName
-- Returns the XML!Element corresponding to the children (identified by the
-- string passed as parameter) of the contextual XML!Element.
-- CONTEXT:	XML!Element
-- IN:		String
-- OUT:		Set(XML!Element)
helper context XML!Element
	def: getElementsByName(name : String) : Set(XML!Element) =
	self.children->select(c | c.oclIsKindOf(XML!Element) and c.name = name);

-- HELPER:	getFirstElementByName
-- Returns the XML!Element corresponding to the first child (identified by the
-- string passed as parameter) of the contextual XML!Element.
-- CONTEXT:	XML!Element
-- IN:		String
-- OUT:		XML!Element
helper context XML!Element
	def: getFirstElementByName(name : String) : XML!Element =
	self.getElementsByName(name)->first();

-- HELPER:	getTextValue()
-- Returns a string contraining the value of the Text which is the child of the
-- contextual XML!Element.
-- CONTEXT:	XML!Element
-- OUT:		String
helper context XML!Element def: getTextValue() : String =
	if self.children->isEmpty()
	then
		''
	else
		if self.children->first().oclIsUndefined()
		then
			''
		else
			self.children->first().value
		endif
	endif;

-- HELPER:	isIntegerType()
-- Returns a boolean stating whether the contextual String encodes a MySQL
-- integer type.
-- CONTEXT:	String
-- OUT:		Boolean
helper context String def: isIntegerType() : Boolean =
	self.startsWith('tinyint') or self.startsWith('int');

-- HELPER:	getItemListRec
-- Returns a sequence of strings corresponding to the different EnumItems
-- encoded within the contextual String.
-- The String passed as parameter contains the EnumItem being parsed.
-- CONTEXT:	String
-- IN:		String
-- OUT:		Sequence(String)
helper context String def: getItemListRec(it : String) : Sequence(String) =
	let char : String = self.substring(1, 1) in
	if self.size() = 1
	then
		Sequence{}
	else
		if char = ','
		then
			self.substring(2, self.size()).getItemListRec('')
		else
			if char = '\''
			then
				if it = ''
				then
					self.substring(2, self.size()).getItemListRec('')
				else
					Sequence{
						it,
						self.substring(2, self.size()).getItemListRec('')
					}->flatten()
				endif
			else
				self.substring(2, self.size()).getItemListRec(it.concat(char))
			endif
		endif
	endif;
		
-- HELPER:	getItemList
-- Returns a sequence of strings corresponding to the different EnumItems encoded
-- within the contextual String.
-- CONTEXT:	String
-- OUT:		Sequence(String)
helper context String def: getItemList() : Sequence(String) =
	let list : String = self.substring(6, self.size()) in
	list.getItemListRec('');

-- HELPER:	getTypeNameRec
-- Returns a string containing the name of the type encoded by the contextual
-- string (recursive helper).
-- CONTEXT:	String
-- OUT:		String
helper context String def: getTypeNameRec() : String =
	let char : String = self.substring(1, 1) in
	if self.size() = 1
	then
		''
	else
		if char = '(' or char = ' '
		then
			''
		else
			char.concat( self.substring(2, self.size()).getTypeNameRec() )
		endif
	endif;

-- HELPER:	getTypeName()
-- Returns a String encoding the name of the type that is contained within the
-- contextual Sring.
-- CONTEXT:	String
-- OUT:		String
helper context String def: getTypeName() : String =
	self.concat('#').getTypeNameRec();


-------------------------------------------------------------------------------
-- RULES ----------------------------------------------------------------------
-------------------------------------------------------------------------------

-- Rule 'DataBase'
-- Creates a DataBase from the root Root element.
rule DataBase {
	from
        i : XML!Root
	to
		o : MySQL!DataBase (
			name <- i.getAttrVal('name'),
			tables <- XML!Element.allInstances()
						->select(e | e.name = 'WINDEV_TABLE')
		)
}


-- Rule 'Table'
-- Creates a Table from an XML!Element named 'WINDEV_TABLE'.
rule Table {
	from
        i : XML!Element (
        	i.name = 'WINDEV_TABLE'
        )
	to
		o : MySQL!Table (
			name <- i.getAttrVal('name'),
			columns <-
				i.getElementsByName('TableInfoTable')->asSequence()
					->select(e |
						e.getFirstElementByName('Type').getTextValue().startsWith('tinyint')
					),
			database <- thisModule.rootElt
		)
}


-- Rule 'IntegerColumn'
-- Creates an IntegerColumn from an XML!Element named 'TableInfoTable' having
-- an integer type.
rule IntegerColumn {
	from
        i : XML!Element (
        	if i.name = 'TableInfoTable'
			then
				i.getFirstElementByName('Type').getTextValue().isIntegerType()
			else
				false
			endif
        )
	to
		o : MySQL!IntegerColumn (
			name <- i.getFirstElementByName('Field').getTextValue(),
			type <-
				i.getFirstElementByName('Type').getTextValue().getTypeName(),
			isPrimaryKey <-
				i.getFirstElementByName('Key').getTextValue() = 'PRI',
			null <- i.getFirstElementByName('Null').getTextValue() = 'YES',
			defaultValue <- i.getFirstElementByName('Default').getTextValue(),
			comment <- i.getFirstElementByName('Comment').getTextValue(),
			isAutoIncrement <-
				i.getFirstElementByName('Extra').getTextValue() = 'auto_increment',
			table <- i.parent
		)
}


-- Rule 'EnumColumn'
-- Creates an EnumColumn from an XML!Element named 'TableInfoTable' having
-- an enumeration type.
rule EnumColumn {
	from
        i : XML!Element (
        	if i.name = 'TableInfoTable'
			then
				i.getFirstElementByName('Type').getTextValue().startsWith('enum')
			else
				false
			endif
        )
	using {
       	items : Sequence(String) =
       		i.getFirstElementByName('Type').getTextValue().getItemList();
	}
	to
		o : MySQL!EnumColumn (
			name <- i.getFirstElementByName('Field').getTextValue(),
			type <- 'enum',
			isPrimaryKey <-
				i.getFirstElementByName('Key').getTextValue() = 'PRI',
			null <- i.getFirstElementByName('Null').getTextValue() = 'YES',
			defaultValue <- i.getFirstElementByName('Default').getTextValue(),
			comment <- i.getFirstElementByName('Comment').getTextValue(),
			table <- i.parent,
			enumSet <- e1
		),
		e1 : MySQL!EnumSet (
			enumItems <- items -> collect(it | thisModule.EnumItems(it, e1))
--			enumItems <- e2
		)
--		e2 : distinct MySQL!EnumItem foreach(i in items) (
--			name <- i,
--			enumSet <- e1
--		)
}

lazy rule EnumItems {
	from
		item: String,
		e1: MySQL!EnumSet 
	to
		e2: MySQL!EnumItem (
			name <- item,
			enumSet <- e1
		)
}


-- Rule 'Column'
-- Creates a Column from an XML!Element named 'TableInfoTable' having neither
-- an integer nor an enumeration type.
rule Column {
	from
        i : XML!Element (
        	if i.name = 'TableInfoTable'
			then
				let type : String =
					i.getFirstElementByName('Type').getTextValue() in
				not type.isIntegerType() and not type.startsWith('enum')
			else
				false
			endif
        )
	to
		o : MySQL!Column (
			name <- i.getFirstElementByName('Field').getTextValue(),
			type <-
				i.getFirstElementByName('Type').getTextValue().getTypeName(),
			isPrimaryKey <-
				i.getFirstElementByName('Key').getTextValue() = 'PRI',
			null <- i.getFirstElementByName('Null').getTextValue() = 'YES',
			defaultValue <- i.getFirstElementByName('Default').getTextValue(),
			comment <- i.getFirstElementByName('Comment').getTextValue(),
			table <- i.parent
		)
}
