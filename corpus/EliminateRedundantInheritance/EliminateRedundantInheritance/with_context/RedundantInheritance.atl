-- @name		Remove redundant inheritance
-- @version		1.0
-- @domains		Catalogue of Model Transformations
-- @authors		Baudry Julien (jul.baudry<at>gmail.com)
-- @date		2006/08/02
-- @description	The purpose of this transformation is to remove redundant inheritance.
-- @see http://www.dcs.kcl.ac.uk/staff/kcl/tcat.pdf   
-- @see section 2.3, page 15
-- @see author of article : K. Lano

module RedundantInheritance; 
create OUT : KM3target from IN : KM3;

--helper context KM3!Class def: getAllSuperTypes : Sequence(KM3!Class) =
--    if self.supertypes->isEmpty()
--        then Sequence {}
--    	else	
--   				self.supertypes->iterate(a; acc:Sequence(KM3!Class)=self.supertypes|
--														 a.getSuperTypes->iterate(b; bcc:Sequence(KM3!Class)=acc|bcc->append(b)))
--    endif;
--    
helper context KM3!Class def : getSuperTypes : Sequence(KM3!Class) =
	self.supertypes->iterate(a; acc:Sequence(KM3!Class)=Sequence{}|
						if self.getAllSuperTypes->count(a)>1											
						then acc->union(Sequence{})
						else acc->append(a)
						endif 
	);

helper context KM3!Class def: getAllSuperTypes : Sequence(KM3!Class) =
	if self.supertypes->isEmpty()
		then Sequence{}	
	else 		self.supertypes->select(c | c.supertypes->notEmpty())
					->iterate(a; acc : Sequence(KM3!Class)=Sequence{} |(acc->including(a.getSuperTypes)))
					->union(
					self.supertypes->iterate(a; acc : Sequence(KM3!Class)=Sequence{} | acc->including(a))
			).flatten()
	endif;
	
--@begin rule Metamodel
rule Metamodel {
	from
		inputMm:KM3!Metamodel
	to
		outputMm:KM3target!Metamodel (
			location <- inputMm.location,
			contents <- inputMm.contents
		)
}
--@end rule Metamodel

--@begin rule Package
rule Package {
	from
		inputPkg:KM3!Package
	to
		outputPkg:KM3target!Package (
			name <- inputPkg.name,
			contents <- inputPkg.contents
		)
}
--@end rule Package

--@begin rule Class
rule Class {
	from
		inputA:KM3!Class 
	to
		outputA:KM3target!Class (
			name <- inputA.name,
			isAbstract <- inputA.isAbstract,
			structuralFeatures <- inputA.structuralFeatures,
			supertypes <- inputA.getSuperTypes
		)
}
--@end rule Class

--@begin rule attribute 
rule attribute {
	from
		inputAtt:KM3!Attribute 
	to
		outputAtt:KM3target!Attribute(
			name <- inputAtt.name,
			isOrdered <- inputAtt.isOrdered,
			isUnique <- inputAtt.isUnique,
			location <- inputAtt.location,
			lower <- inputAtt.lower,
			upper <- inputAtt.upper,
			type <- inputAtt.type,
			owner <- inputAtt.owner
			
		)
}
--@end rule attribute

--@begin rule DataType
rule DataType {
from
		inputData:KM3!DataType
	to
		outputData:KM3target!DataType(
			name <- inputData.name,
			location <- inputData.location
		)
}
--@end rule DataType

--@begin reference
rule reference {
	from
		inputRef:KM3!Reference 
	to
		outputRef:KM3target!Reference (
			name <- inputRef.name,
			isOrdered <- inputRef.isOrdered,
			isUnique <- inputRef.isUnique,
			location <- inputRef.location,
			lower <- inputRef.lower,
			upper <- inputRef.upper,
			type <- inputRef.type,
			owner <- inputRef.owner,
			opposite <- inputRef.opposite
		)
}
--@end reference

--@begin enumeration
rule enumeration {
	from
		inputEnum:KM3!Enumeration 
	to
		outputEnum:KM3target!Enumeration (
			location <- inputEnum.location,
			name  <- inputEnum.name,
			package  <- inputEnum.package
		)

}
--@end enumeration

--@begin literal
rule literal {
	from
		inputEnum:KM3!EnumLiteral
	to
		outputEnum:KM3target!EnumLiteral (
			location <- inputEnum.location,
			name  <- inputEnum.name,
			enum  <- inputEnum.enum
		)

}
--@end literal