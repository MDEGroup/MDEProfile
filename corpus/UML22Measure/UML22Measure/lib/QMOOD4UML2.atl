--@atlcompiler	atl2006
--@name			QMOOD4UML2
--@version		1.0
--@domains		UML2, QMOOD, metrics
--@authors		Eric Vepa (evepa <at> sodius.com) for SODIUS (www.sodius.com)
--@date			2007/06/05
--@description	This library provides QMOOD (Quality Model for Object-Oriented Design) metrics suite on UML2 models (from Eclipse UML2 Project). The models have been extracted from Jar files using the Eclipse plug-in Jar2UML. Only the metrics that fit to UML2 models have been implemented.
--@see			Baroni, A.L.: Formal Definition of Object-Oriented Design Metrics. Master Thesis, Vrije University, Brussel, Belgium, 2002.

library QMOOD4UML2; -- Library Template

uses FLAME4UML2;

-- ===============
-- QMOOD Metrics =
-- ===============

--@begin helper QMOOD::DSC
--@comments Design Size in Classes
--@comments Count of the total number of Classes in the design.
helper context UML2!Package
def : DSC() : Integer =
	self.CN();
--@end helper QMOOD::DSC

--@begin helper QMOOD::NOH
--@comments Number of Hierarchies
--@comments Count of the number of Class hierarchies in the design.
--@comments In [Abreu et al., 2000], this metric has another interpretation.
--@comments  There, hierarchies are not the number of inheritance relations but the number of inheritance trees.
--@comments  In this case, this metric is always equal to 1 for systems developed in languages that have a common super class (like Object in Smalltalk and Java).
--@comments  This case shows that the metric is centered in the language, which is considered as a potential problem (Remember QMOOD metrics were created based upon C++). 
helper context UML2!Package
def : NOH() : Integer =
	self.allClasses->collect(c|c.children)->flatten()->asSet()->size();
--@end helper QMOOD::NOH

--@begin helper QMOOD::NIC
--@comments Number of Independent Classes
--@comments Count of the number of Classes that are not inherited by any Class in the design.
helper context UML2!Package
def : NIC() : Integer =
	self.allClasses->select(c|c.isLeaf)->size();
--@end helper QMOOD::NIC

--@begin helper QMOOD::NSI
--@comments Number of Single Inheritance
--@comments Number of Classes (sub classes) that use inheritance in the design.
--@comments According to [Abreu et al., 2000], for the same reason than in NOH, this metric would be always equal to DSC (if the Classes belonging to the development environment were considered) or to DSC â€“ 1 (in the opposite case).
--@comments This is another signal of language dependency.
helper context UML2!Package
def : NSI() : Integer =
	self.allClasses->iterate(c; acc : Integer = 0|
		if c.PARN() = 1
			then acc + 1
			else acc
		endif);
--@end helper QMOOD::NSI

--@begin helper QMOOD::NNC
--@comments Number of Internal Classes
--@comments Count of the number of internal Classes defined for creating generalization-specialization structures in Class hierarchies of the design.
--@comments In this case, why to have the same value than NOH? Has this metric another interpretation? [Abreu et al., 2000] say that this metric is always equal to DSC or DSC -1, by the reasons pointed out in NOH and NSI.
helper context UML2!Package
def : NNC() : Integer =
	self.NOH();
--@end helper QMOOD::NNC

--@begin helper QMOOD::NAC
--@comments Number of Abstract Classes
--@comments Count of the number of Classes that have been defined purely for organizing information in the design.
helper context UML2!Package
def : NAC() : Integer =
	self.allClasses->select(c|c.isAbstract)->size();
--@end helper QMOOD::NAC

--@begin helper QMOOD::NLC
--@comments Number of Leaf Classes
--@comments Count of the number of leaf Classes in the hierarchies of the design.
--@comments This metric is the same than NIC, defined above.
helper context UML2!Package
def : NLC() : Integer =
	self.allClasses->select(c|c.isLeaf)->size();
--@end helper QMOOD::NLC

--@begin helper QMOOD::ADI
--@comments Average Depth of Inheritance
--@comments The average depth of inheritance of Classes in the design. It is computed by dividing the summation of maximum path lengths to all Classes by the number of Classes. The path length for a Class is the number of edges from the root to the Class in an inheritance tree representation. 
helper context UML2!Package
def : ADI() : Real =
	self.allClasses->iterate(c; acc : Real = 0|(acc + c.DIT()) / self.CN());
--@end helper QMOOD::ADI

--@begin helper QMOOD::AWI
--@comments Average Width of Inheritance
--@comments The average number of children per Class in the design. The metric is computed by dividing the summation of the number of children over all Classes by the number of Classes in the design.
--@comments Accordingly to a different view point, [Abreu et al., 2000] say this metric is always equal to DSC or DSC - 1, when multiple inheritance is not supported by the language, as in Smalltalk, Eiffel or Java. The same happens with NOH, NSI and NNC.
helper context UML2!Package
def : AWI() : Real =
	self.allClasses->iterate(c; acc : Real = 0|(acc + c.CHIN()) / self.CN());
--@end helper QMOOD::AWI

--@begin helper QMOOD::ANA
--@comments Average Number of Ancestors
--@comments The average number of Classes from which a class inherits information.
--@comments This metric is similar to the ADI measure and differs only when there are instances of multiple inheritance in the design.
helper context UML2!Package
def : ANA() : Real =
	if self.CN() > 0
		then self.internalBaseClasses->size() / self.CN()
		else 0
	endif;
--@end helper QMOOD::ANA

--@comments This metrics is not used because result can be negative.
--@begin helper QMOOD::MFM
--@comments Measure of Functional Modularity
--@comments Computes modularity based on the deviation of the number of Methods in a Class from the average number of Methods per Class in the design.
--@comments A value closer than zero is preferred for this metric. A lower value indicates a smaller deviation among Classes in the number of services provided.
--helper context UML2!Class
--def : MFM() : Integer =
--	let owner : UML2!Package = self.owner in
--	if not owner.oclIsUndefined()
--		then if owner.CN() > 0
--				then if owner.PAON() / owner.CN() > 0
--						then (self.allOperations->size() -
--							  (owner.PAON() / owner.CN())) /
--							  	(owner.PAON() / owner.CN())
--						else 0
--					endif
--				else 0
--			endif
--		else 0
--	endif;
--@end helper QMOOD::MFM

--@begin helper QMOOD::MFA
--@comments Measure of Functional Abstraction
--@comments The ratio of the number of Methods inherited by a class to the total number of Methods accessible by members in the Class.
--@comments In order to calculate MFA, the number of Operations must be greater than zero.
helper context UML2!Class
def : MFA() : Integer =
	if self.AON() > 0
		then self.ION() / self.allOperations->iterate(o; acc : Integer = 0|
			if self.FCV(o)
				then acc + 1
				else acc
			endif)
		else 0
	endif;
--@end helper QMOOD::MFA

--@begin helper QMOOD::MAA
--@comments Measure of Attribute Abstraction
--@comments The ratio of the number of Attributes inherited by a Class to the total number of Attributes in the Class.
--@comments In order to calculate MAA, number of attributes must be greater than zero.
helper context UML2!Class
def : MAA() : Integer =
	let nbFCV : Integer =
		self.allAttributes->iterate(a; acc : Integer = 0|
			if self.FCV(a)
				then acc + 1
				else acc
			endif) in
	if nbFCV > 0
		then self.IAN() / nbFCV
		else 0
	endif;
--@end helper QMOOD::MAA

--@begin helper QMOOD::MAT
--@comments Measure of Abstraction
--@comments The average of functional and attribute abstraction measures.
helper context UML2!Class
def : MAT() : Integer =
	(self.MFA() + self.MAA()) / 2;
--@end helper QMOOD::MAT

--@begin helper QMOOD::MOA
--@comments Measure of Aggregation
--@comments Count of the number of data declarations whose types are user defined Classes.
helper context UML2!Class
def : MOA() : Integer =
	let owner : UML2!Package = self.owner in
	if not owner.oclIsUndefined()
		then self.allAttributes->iterate(a; acc: Integer = 0|
			if owner.allClasses->includes(a.type)
				then acc + 1
				else acc
			endif)
		else 0
	endif;
--@end helper QMOOD::MOA

--@begin helper QMOOD::MRM
--@comments Modeled Relationship Measure
--@comments Measure of the total number of Attribute and Parameter based relationships in a Class.
helper context UML2!Class
def : MRM() : Integer =
	self.DCC() + self.NAD();
--@end helper QMOOD::MRM

--@begin helper QMOOD::DAM
--@comments Data Access Metric
--@comments The ratio of the number of private Attributes to the total number of Attributes declared in a Class.
--@comments A high value of DAM is desired. The pre-condition states that the Class must have Attributes.
helper context UML2!Class
def : DAM() : Integer =
	if self.AAN() > 0
		then self.PRIAN() / self.AAN()
		else 0
	endif;
--@end helper QMOOD::DAM

--@begin helper QMOOD::OAM
--@comments Operation Access Metric
--@comments The ratio of the number of public Methods to the total number of Methods declared in the Class.
--@comments A high value for OAM is desired. The pre-condition states that the Class must have Operations.
helper context UML2!Class
def : OAM() : Integer =
	if self.AON() > 0
		then self.PUBON() / self.AON()
		else 0
	endif;
--@end helper QMOOD::OAM

--@begin helper QMOOD::MAM
--@comments Member Access Metric
--@comments This metric computes the access to all the members (Attributes and Methods) of a Class.
--@comments A high value for MAM is desired.
helper context UML2!Class
def : MAM() : Integer =
	((1 - self.DAM()) + self.OAM()) / 2;
--@end helper QMOOD::MAM

--@begin helper QMOOD::NOA
--@comments Number of Ancestors
--@comments Counts the number of distinct Classes which a Class inherits.
helper context UML2!Class
def : NOA() : Integer =
	self.ASCN();
--@end helper QMOOD::NOA

--@begin helper QMOOD::NOM
--@comments Number of Methods
--@comments Count of all the Methods defined in a Class.
helper context UML2!Class
def : NOM() : Integer =
	self.AON();
--@end helper QMOOD::NOM

--@begin helper QMOOD::CIS
--@comments Class Interface Size
--@comments Number of public Methods in a Class.
helper context UML2!Class
def : CIS() : Integer =
	self.PUBON();
--@end helper QMOOD::CIS

--@begin helper QMOOD::NPT
--@comments Number of Unique Parameter Types
--@comments Number of different Parameter types used in the Methods of the Class.
helper context UML2!Class
def : NPT() : Integer =
	self.allParametersTypes->size();
--@end helper QMOOD::NPT

--@begin helper QMOOD::NPM
--@comments Number of Parameters per Method
--@comments Average of the number of Parameters per Method in the Class. Computed by summing the Parameters of all Methods and dividing by the number of Methods in the Class.
--@comments The pre-condition states the Class must have some Operations.
helper context UML2!Class
def : NPM() : Integer =
	if self.AON() > 0
		then self.allParameters->size() / self.AON()
		else 0
	endif;
--@end helper QMOOD::NPM

--@begin helper QMOOD::NOD
--@comments Number of Attributes
--@comments Number of Attributes in the Class.
helper context UML2!Class
def : NOD() : Integer =
	self.AAN();
--@end helper QMOOD::NOD

--@begin helper QMOOD::NAD
--@comments Number of Abstract Data Types
--@comments Number of user defined objects (ADTs) used as Attributes in the Class and which are necessary to instantiate an object instance of the (aggregate) Class.
helper context UML2!Class
def : NAD() : Integer =
	self.allAttributesTypes->size();
--@end helper QMOOD::NAD

--@begin helper QMOOD::NPA
--@comments Number of Public Attributes
--@comments Number of Attributes that are declared as public in the Class.
helper context UML2!Class
def : NPA() : Integer =
	self.PUBAN();
--@end helper QMOOD::NPA

--@begin helper QMOOD::CSM
--@comments Class Size Metric
--@comments Sum of the number of Methods and Attributes in the Class.
helper context UML2!Class
def : CSM() : Integer =
	self.AAN() + self.AON();
--@end helper QMOOD::CSM

--@begin helper QMOOD::CAM
--@comments Cohesion Among Methods of Class
--@comments Computes the relatedness among Methods of the Class based upon the Parameter list of the Methods.
--@comments The metrics is computed using the summation of the intersection of Parameters of a Method with the maximum independent set of all Parameter types in the Class.
helper context UML2!Class
def : CAM() : Integer =
	let divisor : Integer =
		self.AON() * self.allParametersTypes->size() in
	if divisor > 0
		then self.allOperations->iterate(o; acc : Integer = 0|
			acc + o.allParametersTypes->size()) / divisor
		else 0
	endif;
--@end helper QMOOD::CAM

--@begin helper QMOOD::DCC
--@comments Direct Class Coupling
--@comments Count of the different number of Classes that a Class is directly related to. The metric includes Classes that are directly related by Attribute declarations and message passing (Parameters) in Methods.
helper context UML2!Class
def : DCC() : Integer =
	self.allAttributesTypes->union(self.allParametersTypes)->size();
--@end helper QMOOD::DCC

--@begin helper QMOOD::MCC
--@comments Maximum Class Coupling
--@comments This metric not only includes Classes that are directly related to a Class by Attributes and Methods, but also Classes that are indirectly related through the directly related Classes.
helper context UML2!Class
def : MCC() : Integer =
	self.allAttributesTypes->union(self.allParametersTypes)->
		iterate(t; acc : Sequence(UML2!Class) = Sequence{}|
			acc->union(t.allAttributesTypes)->union(t.allParametersTypes))->
				asSet()->size();
--@end helper QMOOD::MCC

--@begin helper QMOOD::DAC
--@comments Direct Attribute Based Coupling
--@comments This metric is a direct count of the number of different Class types that are declared as Attribute references inside a Class.
helper context UML2!Class
def : DAC() : Integer =
	self.allAttributesTypes->size();
--@end helper QMOOD::DAC

--@begin helper QMOOD::DPC
--@comments Direct Parameter Based Coupling
--@comments Number of Class object types that are required directly for a message passing (Parameters) to Methods in the Class.
helper context UML2!Class
def : DPC() : Integer =
	self.allParametersTypes->size();
--@end helper QMOOD::DPC

--@begin helper QMOOD::MPC
--@comments Maximum Parameter Based Coupling
--@comments Number of Class object types that are required directly and indirectly for message passing (Parameters) in the Class.
helper context UML2!Class
def : MPC() : Integer =
	self.allParametersTypes->
		iterate(t; acc : Sequence(UML2!Class) = Sequence{}|
			acc->union(t.allParametersTypes))->asSet()->size();
--@end helper QMOOD::MPC

--@begin helper QMOOD::CCD
--@comments Class Complexity Based on Data
--@comments Computes complexity based upon the number of components (Attributes) that are defined in the Class.
--@comments All component declarations are resolved to the basic primitives (integers, doubles and characters).
--@comments The metric value is a count of the number of primitives.
helper context UML2!Class
def : CCD() : Integer =
	self.AAN() + self.allAttributesTypes->iterate(t; acc : Integer = 0|
			acc + t.AAN());
--@end helper QMOOD::CCD

--@begin helper QMOOD::CCP
--@comments Class Complexity Based on Method Parameters
--@comments Estimates complexity based upon the number of Parameters required to call Methods of the Class.
--@comments Inherited Method Parameters are also included in the computation of the metric value.
helper context UML2!Class
def : CCP() : Integer =
	self.allParameters->size();
--@end helper QMOOD::CCP

--@begin helper QMOOD::CCM
--@comments Class Complexity Based on Members
--@comments This metric is an aggregate of the data and method Parameter complexities.
helper context UML2!Class
def : CCM() : Integer =
	self.CCD() + self.CCP();
--@end helper QMOOD::CCM